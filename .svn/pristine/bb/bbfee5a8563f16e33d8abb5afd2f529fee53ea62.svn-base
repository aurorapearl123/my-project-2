<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Leave_type extends CI_Controller
{
    //Default Variables
    var $common_menu;
    var $roles;
    var $data;
    var $table;
    var $pfield;
    var $logfield;
    var $module;
    var $module_label;
    var $module_path;
    var $controller_page;

    public function __construct()
    {
        parent::__construct();
        $this->load->model('generic_model','record');
        // set variables
        $this->data['current_module'] = $this->module = 'Leave Type';
        $this->module_label = 'Leave Types';
        $this->table        = 'leave_types';
        $this->module_path  = 'modules/Leave/Leave_Type';
        $this->module_path_submenu  = 'modules/Leave/submenu';
        $this->pfield = 'leaveTypeID';
        $this->logfield = 'code';
        $this->data['controller_page'] = $this->controller_page = site_url('leave_type');
        // check if under maintenance
        if ($this->config_model->getConfig('Maintenance Mode')=='1') {
            header('location: '.site_url('maintenance_mode'));
        }
        // check if loggedin
    }

    private function submenu()
    {
        //submenu setup
    }
    
    private function check_roles()
    {
        $this->roles['create']  = $this->userrole_model->has_access($this->session->userdata('current_userID'),'Add '.$this->module);
        $this->roles['view']    = $this->userrole_model->has_access($this->session->userdata('current_userID'),'View '.$this->module);
        $this->roles['edit']    = $this->userrole_model->has_access($this->session->userdata('current_userID'),'Edit Existing '.$this->module);
        $this->roles['delete']  = $this->userrole_model->has_access($this->session->userdata('current_userID'),'Delete Existing '.$this->module);
        $this->roles['approve'] = $this->userrole_model->has_access($this->session->userdata('current_userID'),'Approve '.$this->module);
    }
    
    public function index()
    {
        $this->show();
    }
    
    public function create()
    {
        $this->submenu();
        $data = $this->data;
        // check roles
        if ($this->roles['create']) {
            $data['required_fields'] = array('code'=>'Code', 'leaveType'=>'Name');
            // load views
            $this->load->view('header', $data);
            $this->load->view($this->module_path.'/create');
            $this->load->view('footer');

        } else {
            // no access this page
            $data['class']  = "danger";
            $data['msg']    = "Sorry, you don't have access to this page!";
            $data['urlredicrect']    = "";
            $this->load->view('header', $data);
            $this->load->view('message');
            $this->load->view('footer');
        }
    }
    
    public function save()
    {
        //load submenu
        $this->submenu();
        $data = $this->data;

        // check role
        if ($this->roles['create']) {
            $this->record->table  = $this->table;
            $this->record->fields = array();
            
            $table_fields = array('code', 'leaveType', 'creditEarn', 'frequency', 'isWithoutpayCover', 'isCashable', 'remarks');
            
            foreach($table_fields as $fld) {
                $this->record->fields[$fld] = trim($this->input->post($fld));
            }

            if ($this->record->save()) {
                $this->record->fields = array();
                $this->record->where['code']    = trim($this->input->post('code'));             
                $this->record->retrieve();  
                
                $this->db->where('status', 1);
                $this->db->order_by('rank', 'asc');
                $this->db->order_by('employeeType', 'asc');
                $query = $this->db->get('employee_types');
                
                if ($query->num_rows()) {
                    $type_earning  = array();
                    foreach ($query->result() as $row) {
                        $info = array();
                        $info['leaveTypeID']    = $this->record->field->leaveTypeID;
                        $info['employeeTypeID'] = $row->employeeTypeID;
                        $info['earning']        = $this->input->post('earning_'.$row->employeeTypeID);
                        $type_earning[]         = $info;         
                    }
                    $this->db->insert_batch('leave_type_earnings', $type_earning);
                }       

                // update all employees
                $this->db->select('employees.empID');
                $query = $this->db->get('employees');
                
                if ($query->num_rows()) {
                    $credit  = array();
                    $ledger  = array();
                    foreach ($query->result() as $row) {
                        $this->db->select('employments.employeeTypeID');
                        $this->db->from('employments');
                        $this->db->join('employee_types','employments.employeeTypeID=employee_types.employeeTypeID','left');
                        $this->db->where('employments.empID', $row->empID);
                        $this->db->order_by('employee_types.rank','asc');
                        $this->db->limit(1);
                        $result = $this->db->get()->row();
                        
                        $info = array();
                        $info['empID']      = $row->empID;
                        $info['leaveTypeID']= $this->record->field->leaveTypeID;
                        $info['credit']     = $this->input->post('earning_'.$result->employeeTypeID);
                        $info['lastUpdate'] = date('Y-m-d H:i:s');
                        $credit[]           = $info;
                        
                        $info = array();
                        $info['empID']      = $row->empID;
                        $info['leaveTypeID']= $this->record->field->leaveTypeID;
                        $info['date']       = date('Y-m-d H:i:s');
                        $info['debit']      = $this->input->post('earning_'.$result->employeeTypeID);
                        $info['credit']     = 0;
                        $info['remarks']    = "Initial Credits";
                        $info['updatedBy']  = $this->session->userdata('current_userID');
                        $ledger[]           = $info;                        
                    }
                    $this->db->insert_batch('leave_credits', $credit);
                    $this->db->insert_batch('leave_credit_ledger', $ledger);
                }
                
                // record logs
                $logs = "Record - ".trim($this->input->post($this->logfield));
                $this->log_model->table_logs($this->module, $this->table, $this->pfield, $this->record->field->$data['pfield'], 'Insert', $logs);
                
                $logfield = $this->pfield;

                // success msg
                $data['class']  = "success";
                $data['msg']    = $this->module." successfully saved.";
                $data['urlredicrect']    = "";
                $this->load->view('header', $data);
                $this->load->view('message');
                $this->load->view('footer');
            } else {
                // Unable to save
                $data['class']  = "danger";
                $data['msg']    = "Error in saving the ".strtolower($this->module)."!";
                $data['urlredicrect']    = "";
                $this->load->view('header', $data);
                $this->load->view('message');
                $this->load->view('footer');
            }

        } else {
            // no access this page
            $data['class']  = "danger";
            $data['msg']    = "Sorry, you don't have access to this page!";
            $data['urlredicrect']    = "";
            $this->load->view('header', $data);
            $this->load->view('message');
            $this->load->view('footer');
        }
    }
    
    public function edit($id)
    {
        $this->submenu();
        $data = $this->data;
        $id = $this->encrypter->decode($id);

        if ($this->roles['edit']) {
            $data['required_fields'] = array('code'=>'Code', 'leaveType'=>'Name', 'status'=>'Status');  
            // for retrieve with joining tables -------------------------------------------------
            // set table
            $this->record->table = $this->table;
            // set fields for the current table
            $this->record->setFields();
            // extend fields - join tables  
            // set joins                
            // set where
            $this->record->where[$this->table.'.'.$this->pfield] = $id;
            // execute retrieve
            $this->record->retrieve();
            // ----------------------------------------------------------------------------------
            $data['rec'] = $this->record->field;

            // load views
            $this->load->view('header', $data);
            $this->load->view($this->module_path.'/edit');
            $this->load->view('footer');
        } else {
            // no access this page
            $data['class']  = "danger";
            $data['msg']    = "Sorry, you don't have access to this page!";
            $data['urlredicrect']    = "";
            $this->load->view('header', $data);
            $this->load->view('message');
            $this->load->view('footer');
        }
    }
    
    public function update()
    {
        // load submenu
        $this->submenu();
        $data = $this->data;
        $table_fields = array('code', 'leaveType', 'creditEarn', 'frequency', 'isWithoutpayCover', 'isCashable', 'remarks');

        if ($this->roles['edit']) {
            $this->record->table  = $this->table;
            $this->record->fields = array();
            
            foreach($table_fields as $fld) {
                $this->record->fields[$fld] = trim($this->input->post($fld));
            }                   
            
            $this->record->pfield   = $this->pfield;
            $this->record->pk       = trim($this->input->post($this->pfield));
            
            // field logs here
            $wasChange = $this->log_model->field_logs($this->module, $this->table, $this->pfield, $this->record->pk, 'Update', $this->record->fields);

            if ($this->record->update()) {
                $this->db->where('leaveTypeID', $this->record->pk); 
                $this->db->delete('leave_type_earnings');
                
                $this->db->where('status', 1);
                $this->db->order_by('rank', 'asc');
                $this->db->order_by('employeeType', 'asc');
                $result = $this->db->get('employee_types');
                
                if ($result->num_rows()) {
                    $earning  = array();
                    foreach ($result->result() as $row) {
                        $info = array();
                        $info['leaveTypeID']    = $this->record->pk;
                        $info['employeeTypeID'] = $row->employeeTypeID;
                        $info['earning']        = $this->input->post('earning_'.$row->employeeTypeID);
                        $earning[] = $info;
                    }
                    $this->db->insert_batch('leave_type_earnings', $earning);
                }
                
                // record logs
                if ($wasChange) {
                    $logs = "Record - ".trim($this->input->post($this->logfield));
                    $this->log_model->table_logs($this->module, $this->table, $this->pfield, $this->record->pk, 'Update', $logs);
                }

                // Successfully updated
                $data['class']  = "success";
                $data['msg']    = $this->module." successfully updated.";
                $data['urlredicrect']    = "";
                $this->load->view('header', $data);
                $this->load->view('message');
                $this->load->view('footer');
            } else {
                // Error updating
                $data['class']  = "danger";
                $data['msg']    = "Error in updating the ".strtolower($this->module)."!";
                $data['urlredicrect']    = "";
                $this->load->view('header', $data);
                $this->load->view('message');
                $this->load->view('footer');
            }
        } else {
            // no access this page
            $data['class']  = "danger";
            $data['msg']    = "Sorry, you don't have access to this page!";
            $data['urlredicrect']    = "";
            $this->load->view('header', $data);
            $this->load->view('message');
            $this->load->view('footer');
        }
    }

    public function delete($id=0)
    {
        // load submenu
        $this->submenu();
        $data = $this->data;
        $id = $this->encrypter->decode($id);

        if ($this->roles['delete'] && !$this->_in_used($id)) {
            // set fields
            $this->record->fields = array();
            // set table
            $this->record->table  = $this->table;
            // set where
            $this->record->where[$this->pfield] = $id;
            // execute retrieve
            $this->record->retrieve();

            if (!empty($this->record->field)) {
                $this->record->pfield   = $this->pfield;
                $this->record->pk       = $id;
                
                // record logs
                $logfield = $this->logfield;

                if ($this->record->delete()) {
                    // record logs
                    $logs = "Record - ".$this->record->field->$logfield;
                    $this->log_model->table_logs($this->module, $this->table, $this->pfield, $this->record->pk, 'Delete', $logs);

                    //Success msg
                    $data['class']  = "success";
                    $data['msg']    = $this->module." successfully deleted.";
                    $data['urlredicrect']    = $this->controller_page."/show";
                    $this->load->view('header', $data);
                    $this->load->view('message');
                    $this->load->view('footer');
                } else {
                    //Error Deleting
                    $data['class']  = "danger";
                    $data['msg']    = "Error in deleting the ".strtolower($this->module)."!";
                    $data['urlredicrect']    = "";
                    $this->load->view('header', $data);
                    $this->load->view('message');
                    $this->load->view('footer');
                }

            } else {
                //Record not found
                $data['class']  = "danger";
                $data['msg']    = $this->module." record not found!";
                $data['urlredicrect']    = "";
                $this->load->view('header', $data);
                $this->load->view('message');
                $this->load->view('footer');
            }
        } else {
            //No access this page
            $data['class']  = "danger";
            $data['msg']    = "Sorry, you don't have access to this page!";
            $data['urlredicrect']    = "";
            $this->load->view('header', $data);
            $this->load->view('message');
            $this->load->view('footer');
        }
    }
    
    public function view($id)
    {
        // load submenu
        $this->submenu();
        $data = $this->data;
        $id = $this->encrypter->decode($id);

        if ($this->roles['view']) {
            // for retrieve with joining tables -------------------------------------------------
            // set table
            $this->record->table = $this->table;            
            // set fields for the current table
            $this->record->setFields();         
            // extend fields - join tables  
            // set joins        
            // set where
            $this->record->where[$this->table.'.'.$this->pfield] = $id;
            
            // execute retrieve
            $this->record->retrieve();
            // ----------------------------------------------------------------------------------
            $data['rec'] = $this->record->field;                        
            
            // record logs
            if ($this->config_model->getConfig('Log all record views') == '1') {
                $logfield = $this->logfield;
                $logs = "Record - ".$this->record->field->$logfield;
                $this->log_model->table_logs($this->module, $this->table, $this->pfield, $this->record->field->$data['pfield'], 'View', $logs);
            }
            
            // check if record is used in other tables
            $data['inUsed'] = $this->_in_used($id);
            //load views
            $this->load->view('header', $data);
            $this->load->view($this->module_path.'/view');
            $this->load->view('footer');
        } else {
            // no access this page
            $data['class']  = "danger";
            $data['msg']    = "Sorry, you don't have access to this page!";
            $data['urlredicrect']    = "";
            $this->load->view('header', $data);
            $this->load->view('message');
            $this->load->view('footer');
        }
    }
    
    public function show()
    {
        // load submenu
        $this->submenu();
        $data = $this->data;
        // Sorting Functions

        //Setup list
        $data['records'] = $this->db->get($this->table);
        //load views
        $this->load->view('header', $data);
        $this->load->view($this->module_path.'/list');
        $this->load->view('footer');
    }
    
    public function printlist()
    {
        // load submenu
        $this->submenu();
        $data = $this->data;
        //sorting

        //load views
        $this->load->view('header', $data);
        $this->load->view($this->module_path.'/printlist');
        $this->load->view('footer');
    }
    
	
    
    //Conditions and fields changes
    public function check_duplicate()
    {
        // set table
        $this->record->table = $this->table;
        // set where        
        $this->record->where['code'] = trim($this->input->post('code'));
        // execute retrieve
        $this->record->retrieve();
        
        if (!empty($this->record->field))
            echo "1"; // duplicate
        else 
            echo "0";
    }


    //Ajax functions
    public function update_rank()
    {
        $id = trim($this->input->post('id'));
        
        $this->record->table  = $this->table;
        $this->record->fields = array();
        
        $this->record->fields['rank'] = trim($this->input->post('rank'));
        $this->record->pfield   = $this->pfield;
        $this->record->pk       = $id;
        
        // field logs here
        $wasChange = $this->log_model->field_logs($this->module, $this->table, $this->pfield, $this->record->pk, 'Update Rank', $this->record->fields);
        
        if ($this->record->update()) {
            $this->record->fields = array();
            $this->record->table  = $this->table;
            $this->record->where[$this->pfield] = $id;
            $this->record->retrieve();
            // record logs
            if ($wasChange) {
                $logfield = $this->logfield;
                $logs = "Record - ".$this->record->field->$logfield;
                $this->log_model->table_logs($this->module, $this->table, $this->pfield, $this->record->pk, 'Update Rank', $logs);
                echo "1";
            } else {
                echo "0";
            }
        } else {
            echo "0";
        }
    }
    
    public function getLeaveTypes()
    {       
        $this->db->order_by('code','asc');
        $records = $this->db->get('leave_types');
        echo $this->frameworkhelper->get_json_data($records, 'leaveTypeID', 'leaveType');
    }   
    
    public function display_session()
    {               
        echo var_dump($_SESSION);
    }





    // Private functions
    private function _in_used($id=0)
    {
        $tables = array();
        
        if(!empty($tables)) {     
            foreach($tables as $table) {
                $this->db->where($this->pfield, $id);
                $result_count = $this->db->count_all_results($table);
                
                if($result_count > 0) {
                    return true;
                }
            }                               
        } 
        return false;
    }
}
