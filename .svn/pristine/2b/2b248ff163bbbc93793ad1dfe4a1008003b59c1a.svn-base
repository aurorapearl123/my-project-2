<?php
defined ( 'BASEPATH' ) or exit ( 'No direct script access allowed' );

class Stockcard extends CI_Controller {

    //Default Variables
    var $menu;
    var $roles;
    var $data;
    var $table;
    var $pfield;
    var $logfield;
    var $module;
    var $modules;
    var $module_path;
    var $controller_page;


    public function test(){
        echo 'churva';
    }

    public function __construct()
    {

        parent::__construct();
        $this->load->model('generic_model','record');
        $this->module       = 'Inventory';
        $this->data['controller_page']  = $this->controller_page = site_url('stockcard');// defines contoller link
        $this->table        = 'stockcard';                                                  // defines the default table
        $this->pfield = $this->data['pfield'] = 'id';                                                 // defines primary key
        // $this->logfield     = 'deptCode';
        $this->module_path  = 'modules/'.strtolower(str_replace(" ","_",$this->module)).'/stockcard';// defines module path / folder name
        
        // check for maintenance period
        if ($this->config_model->getConfig('Maintenance Mode')=='1') {
            header('location: '.site_url('maintenance_mode'));
        }
        
        // check user session
        if (!$this->session->userdata('current_user')->sessionID) {
            header('location: '.site_url('login'));
        }
    }


    private function submenu()
    {

        //submenu setup
        require_once('modules.php');

        foreach($modules as $mod) {
            //modules/<module>/
            // - <menu>
            // - <metadata>
            $this->load->view('modules/'.str_replace(" ","_",strtolower($mod)).'/metadata');
        }

        $this->data['modules']               = $this->modules;
        $this->data['current_main_module']   = $this->modules[$this->module]['main'];              // defines the current main module
        $this->data['current_module']        = $this->modules[$this->module]['sub']['Stockcard'];      // defines the current sub module
        // check roles
        $this->check_roles();
        $this->data['roles']   = $this->roles;
    }


    private function check_roles()
    {
        // check roles
        $this->roles['create']  = $this->userrole_model->has_access($this->session->userdata('current_user')->userID,'Add '.$this->data['current_module']['module_label']);
        $this->roles['view']    = $this->userrole_model->has_access($this->session->userdata('current_user')->userID,'View '.$this->data['current_module']['module_label']);
        $this->roles['edit']    = $this->userrole_model->has_access($this->session->userdata('current_user')->userID,'Edit Existing '.$this->data['current_module']['module_label']);
        $this->roles['delete']  = $this->userrole_model->has_access($this->session->userdata('current_user')->userID,'Delete Existing '.$this->data['current_module']['module_label']);
    }

    private function _in_used($id=0)
    {
        $tables = array();
    
        if(!empty($tables)) {
            foreach($tables as $table=>$fld) {
                $this->db->where($fld, $id);
                if($this->db->count_all_results($table)) {
                    return true;
                }
            }
        }
        return false;
    }

    public function index()
    {
        $this->show();
    }

    public function show()
    {

        //************** general settings *******************
        // load submenu
        $this->submenu();
        $data = $this->data;
        
        // **************************************************
        // variable:field:default_value:operator
        // note: dont include the special query field filter                
        $condition_fields = array(
            array('variable'=>'branchName', 'field'=>'branches.branchName', 'default_value'=>'', 'operator'=>'like_both'),            
            array('variable'=>'brand', 'field'=>$this->table.'.brand', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'description', 'field'=>$this->table.'.description', 'default_value'=>'', 'operator'=>'like_both'),            
            array('variable'=>'umsr', 'field'=>$this->table.'.umsr', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'date', 'field'=>$this->table.'.date', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'refNo', 'field'=>$this->table.'.refNo', 'default_value'=>'', 'operator'=>'where')            
        );
        
        // sorting fields
        // $sorting_fields = array('date'=>'asc');
        
        $controller = $this->uri->segment(1);
        
        if ($this->uri->segment(3))
            $offset = $this->uri->segment(3);
        else
            $offset = 0;

        // source of filtering
        $filter_source = 0; // default/blank
        if ($this->input->post('filterflag') || $this->input->post('sortby')) {
            $filter_source = 1;
        } else {
            foreach($condition_fields as $key) {
                if ($this->input->post($key['variable'])) {
                    $filter_source = 1; // form filters
                    break;
                }
            }
        }

        if (!$filter_source) {
            foreach($condition_fields as $key) {
                if ($this->session->userdata($controller.'_'.$key['variable']) || $this->session->userdata($controller.'_sortby') || $this->session->userdata($controller.'_sortorder')) {
                    $filter_source = 2; // session
                    break;
                }
            }
        }
        
        switch($filter_source) 
        {
            case 1:
                foreach($condition_fields as $key) {
                    $$key['variable'] = trim($this->input->post($key['variable']));
                }

                $sortby     = trim($this->input->post('sortby'));
                $sortorder  = trim($this->input->post('sortorder'));
                
                break;
            case 2:
                foreach($condition_fields as $key) {
                    $$key['variable'] = $this->session->userdata($controller.'_'.$key['variable']);
                }
                
                $sortby     = $this->session->userdata($controller.'_sortby');
                $sortorder  = $this->session->userdata($controller.'_sortorder');
                break;
            default:
                foreach($condition_fields as $key) {
                    $$key['variable'] = $key['default_value'];
                }
                $sortby     = "";
                $sortorder  = "";
        }

        if ($this->input->post('limit')) {
            if ($this->input->post('limit')=="All")
                $limit = "";
            else
                $limit = $this->input->post('limit');
        } else if ($this->session->userdata($controller.'_limit')) {
            $limit = $this->session->userdata($controller.'_limit');
        } else {
            $limit = 25; // default limit
        }
        
        // set session variables
        foreach($condition_fields as $key) {
            $this->session->set_userdata($controller.'_'.$key['variable'], $$key['variable']);
        }
        $this->session->set_userdata($controller.'_sortby', $sortby);
        $this->session->set_userdata($controller.'_sortorder', $sortorder);
        $this->session->set_userdata($controller.'_limit', $limit);
            
        // assign data variables for views
        foreach($condition_fields as $key) {
            $data[$key['variable']] = $$key['variable'];
        }
        
        $userCurrentBranch      =   $this->session->userdata('current_user')->branchID;

        $dateNow = new DateTime();
        $start_date = date('Y-m-01');
        $end_date = $dateNow->format('Y-m-d');
        // select
        $this->db->select($this->table.'.*');
        $this->db->select('branches.branchName');
        $this->db->select('items.brand');
        $this->db->select('items.item');
        $this->db->select('items.description');       
        $this->db->select('items.umsr');       
       
        // from
        $this->db->from($this->table);
        
        // join  
        $this->db->join('branches',$this->table.'.branchID=branches.branchID','left');
        $this->db->join('items',$this->table.'.itemID=items.itemID','left');
        
        // where

        $this->db->where($this->table.'.branchID',$userCurrentBranch);     

        $this->db->where($this->table.'.itemID',1);      
        $this->db->where('DATE('.$this->table.'.date) >= ',$start_date );
        $this->db->where('DATE('.$this->table.'.date) <= ',$end_date );
        
        //change end
        //===================================
        
        // 
        // set conditions here
        foreach($condition_fields as $key) {
            $operators = explode('_',$key['operator']);
            $operator  = $operators[0];
            // check if the operator is like
            if (count($operators)>1) {
                // like operator
                if (trim($$key['variable'])!='' && $key['field'])
                    $this->db->$operator($key['field'], $$key['variable'], $operators[1]); 
            } else {
                if (trim($$key['variable'])!='' && $key['field'])
                    $this->db->$operator($key['field'], $$key['variable']);
            }
        }
        
        // get
        $data['ttl_rows'] = $config['total_rows'] = $this->db->count_all_results();

        // set pagination   
        $config['base_url'] = $this->controller_page.'/show/';
        $config['per_page'] = $limit;
        $this->pagination->initialize($config);
        
        // select
        $this->db->select($this->table.'.*');
        $this->db->select('branches.branchName');
        $this->db->select('items.brand');
        $this->db->select('items.item');
        $this->db->select('items.description');       
        $this->db->select('items.umsr');       
       
        // from
        $this->db->from($this->table);
        
        // join  
        $this->db->join('branches',$this->table.'.branchID=branches.branchID','left');
        $this->db->join('items',$this->table.'.itemID=items.itemID','left');
        
        // where

        $this->db->where($this->table.'.itemID',1);      
        $this->db->where('DATE('.$this->table.'.date) >= ',$start_date );
        $this->db->where('DATE('.$this->table.'.date) <= ',$end_date );        
        //change end
        //===================================
        // where
        // set conditions here
        foreach($condition_fields as $key) {
            $operators = explode('_',$key['operator']);
            $operator = $operators[0];
            // check if the operator is like
            if (count($operators)>1) {
                // like operator
                if (trim($$key['variable'])!='' && $key['field'])
                    $this->db->$operator($key['field'], $$key['variable'], $operators[1]); 
            } else {
                if (trim($$key['variable'])!='' && $key['field'])
                    $this->db->$operator($key['field'], $$key['variable']);
            }
        }   
        
        if ($sortby && $sortorder) {
            $this->db->order_by($sortby, $sortorder);

            if (!empty($sorting_fields)) {
                foreach($sorting_fields as $fld=>$s_order) {
                    if ($fld != $sortby) {
                        $this->db->order_by($fld, $s_order);
                    }
                }
            }
        } else {
            $ctr = 1;
            if (!empty($sorting_fields)) {
                foreach($sorting_fields as $fld=>$s_order) {
                    if ($ctr == 1) {
                        $sortby     = $fld;
                        $sortorder  = $s_order;
                    }
                    $this->db->order_by($fld, $s_order);
                    
                    $ctr++;
                }
            }
        }
            
        if ($limit) {
            if ($offset) {
                $this->db->limit($limit,$offset); 
            } else {
                $this->db->limit($limit); 
            }
        }
        
        // assigning variables
        $data['sortby']     = $sortby;
        $data['sortorder']  = $sortorder;
        $data['limit']      = $limit;
        $data['offset']     = $offset;
        
        // get
        $data['record'] = $this->db->get()->result();
        //load views
        $this->load->view('header', $data);
        $this->load->view($this->module_path.'/list');
        $this->load->view('footer');
    }

    public function printlist() 
    {
        // load submenu
        $this->submenu();
        $data = $this->data;
        //sorting
        
        // variable:field:default_value:operator
        // note: dont include the special query field filter
        $condition_fields = array(
            array('variable'=>'branchName', 'field'=>'branches.branchName', 'default_value'=>'', 'operator'=>'like_both'),            
            array('variable'=>'brand', 'field'=>'items.brand', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'description', 'field'=>'items.description', 'default_value'=>'', 'operator'=>'like_both'),            
            array('variable'=>'umsr', 'field'=>'items.umsr', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'date', 'field'=>$this->table.'.date', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'refNo', 'field'=>$this->table.'.refNo', 'default_value'=>'', 'operator'=>'where')            
        );
        
        // sorting fields
        // $sorting_fields = array('date'=>'desc');
        
        $controller = $this->uri->segment(1);
        
        foreach($condition_fields as $key) {
            $$key['variable'] = $this->session->userdata($controller.'_'.$key['variable']);
        }
        
        $limit      = $this->session->userdata($controller.'_limit');
        $offset     = $this->session->userdata($controller.'_offset');
        $sortby     = $this->session->userdata($controller.'_sortby');
        $sortorder  = $this->session->userdata($controller.'_sortorder');
        
        // select
        $this->db->select($this->table.'.*');
        $this->db->select('branches.branchName');
        $this->db->select('items.brand');
        $this->db->select('items.item');
        $this->db->select('items.description');       
        $this->db->select('items.umsr');       
       
        // from
        $this->db->from($this->table);
        
        // join  
        $this->db->join('branches',$this->table.'.branchID=branches.branchID','left');
        $this->db->join('items',$this->table.'.itemID=items.itemID','left');
        
        // where
        
        // set conditions here
        foreach($condition_fields as $key) {
            $operators = explode('_',$key['operator']);
            $operator = $operators[0];
            // check if the operator is like
            if (count($operators)>1) {
                // like operator
                if (trim($$key['variable'])!='' && $key['field'])
                    $this->db->$operator($key['field'], $$key['variable'], $operators[1]);
            } else {
                if (trim($$key['variable'])!='' && $key['field'])
                    $this->db->$operator($key['field'], $$key['variable']);
            }
        }
        
        if ($sortby && $sortorder) {
            $this->db->order_by($sortby, $sortorder);
        
            if (!empty($sorting_fields)) {
                foreach($sorting_fields as $fld=>$s_order) {
                    if ($fld != $sortby) {
                        $this->db->order_by($fld, $s_order);
                    }
                }
            }
        } else {
            $ctr = 1;
            if (!empty($sorting_fields)) {
                foreach($sorting_fields as $fld=>$s_order) {
                    if ($ctr == 1) {
                        $sortby     = $fld;
                        $sortorder  = $s_order;
                    }
                    $this->db->order_by($fld, $s_order);
        
                    $ctr++;
                }
            }
        }
        
        if ($limit) {
            if ($offset) {
                $this->db->limit($limit,$offset);
            } else {
                $this->db->limit($limit);
            }
        }
        
        // assigning variables
        $data['sortby']     = $sortby;
        $data['sortorder']  = $sortorder;
        $data['limit']      = $limit;
        $data['offset']     = $offset;
        
        // get
        $data['record'] = $this->db->get()->result();
        
        $data['title'] = "Stock Card";

        //load views
        $this->load->view('header_print', $data);
        $this->load->view($this->module_path.'/printlist');
        $this->load->view('footer_print');
    }

    public function exportlist(){
        
         // load submenu
        $this->submenu();
        $data = $this->data;
        //sorting
        
        // variable:field:default_value:operator
        // note: dont include the special query field filter
        $condition_fields = array(
            array('variable'=>'branchName', 'field'=>'branches.branchName', 'default_value'=>'', 'operator'=>'like_both'),            
            array('variable'=>'brand', 'field'=>'items.brand', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'description', 'field'=>'items.description', 'default_value'=>'', 'operator'=>'like_both'),            
            array('variable'=>'umsr', 'field'=>'items.umsr', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'date', 'field'=>$this->table.'.date', 'default_value'=>'', 'operator'=>'like_both'),
            array('variable'=>'refNo', 'field'=>$this->table.'.refNo', 'default_value'=>'', 'operator'=>'where')            
        );
        
        // sorting fields
        $sorting_fields = array('date'=>'desc');
        
        $controller = $this->uri->segment(1);
        
        foreach($condition_fields as $key) {
            $$key['variable'] = $this->session->userdata($controller.'_'.$key['variable']);
        }
        
        $limit      = $this->session->userdata($controller.'_limit');
        $offset     = $this->session->userdata($controller.'_offset');
        $sortby     = $this->session->userdata($controller.'_sortby');
        $sortorder  = $this->session->userdata($controller.'_sortorder');
        
        // select
        $this->db->select($this->table.'.*');
        $this->db->select('branches.branchName');
        $this->db->select('items.brand');
        $this->db->select('items.item');
        $this->db->select('items.description');       
        $this->db->select('items.umsr');       
       
        // from
        $this->db->from($this->table);
        
        // join  
        $this->db->join('branches',$this->table.'.branchID=branches.branchID','left');
        $this->db->join('items',$this->table.'.itemID=items.itemID','left');
        
        // where
        // set conditions here
        foreach($condition_fields as $key) {
            $operators = explode('_',$key['operator']);
            $operator = $operators[0];
            // check if the operator is like
            if (count($operators)>1) {
                // like operator
                if (trim($$key['variable'])!='' && $key['field'])
                    $this->db->$operator($key['field'], $$key['variable'], $operators[1]);
            } else {
                if (trim($$key['variable'])!='' && $key['field'])
                    $this->db->$operator($key['field'], $$key['variable']);
            }
        }
        
        if ($sortby && $sortorder) {
            $this->db->order_by($sortby, $sortorder);
        
            if (!empty($sorting_fields)) {
                foreach($sorting_fields as $fld=>$s_order) {
                    if ($fld != $sortby) {
                        $this->db->order_by($fld, $s_order);
                    }
                }
            }
        } else {
            $ctr = 1;
            if (!empty($sorting_fields)) {
                foreach($sorting_fields as $fld=>$s_order) {
                    if ($ctr == 1) {
                        $sortby     = $fld;
                        $sortorder  = $s_order;
                    }
                    $this->db->order_by($fld, $s_order);
        
                    $ctr++;
                }
            }
        }
        
        if ($limit) {
            if ($offset) {
                $this->db->limit($limit,$offset);
            } else {
                $this->db->limit($limit);
            }
        }
        
        // assigning variables
        $data['sortby']     = $sortby;
        $data['sortorder']  = $sortorder;
        $data['limit']      = $limit;
        $data['offset']     = $offset;
        
        // get
        $record = $this->db->get()->result();
        
        $title          = "Stock Card";
        $companyName    = $this->config_model->getConfig('Company');
        $address        = $this->config_model->getConfig('Address');
         
        //XML Blurb
        $data = "<?xml version='1.0'?>
  
            <?mso-application progid='Excel.Sheet'?>
  
             <Workbook xmlns='urn:schemas-microsoft-com:office:spreadsheet' xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:x='urn:schemas-microsoft-com:office:excel' xmlns:ss='urn:schemas-microsoft-com:office:spreadsheet' xmlns:html='http://www.w3.org/TR/REC-html40'>
             <Styles>
             <Style ss:ID='s20'>
                 <Alignment ss:Horizontal='Center' ss:Vertical='Bottom'/>
               <Font ss:Bold='1' ss:Size='14'/>
             </Style>
    
             <Style ss:ID='s23'>
               <Font ss:Bold='1'/>
             <Borders>
                     <Border ss:Position='Left' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Top' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Right' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Bottom' ss:LineStyle='Continuous' ss:Weight='1'/>
                    </Borders>
             </Style>
  
             <Style ss:ID='s24'>
                 <Alignment ss:Horizontal='Center' ss:Vertical='Bottom'/>
                 <Font ss:Bold='1'/>
             </Style>
      
             <Style ss:ID='s24A'>
                 <Alignment ss:Horizontal='Center' ss:Vertical='Bottom'/>
             </Style>
      
             <Style ss:ID='s24B'>
                 <Alignment ss:Horizontal='Center' ss:Vertical='Bottom'/>
                <Borders>
                     <Border ss:Position='Left' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Top' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Right' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Bottom' ss:LineStyle='Continuous' ss:Weight='1'/>
                    </Borders>
             </Style>
      
             <Style ss:ID='s25'>
                 <Alignment ss:Horizontal='Right' ss:Vertical='Bottom'/>
                 <NumberFormat ss:Format='#,##0.00_ ;[Red]\-#,##0.00\ '/>
                 <Font ss:Bold='1'/>
             </Style>
             <Style ss:ID='s26'>
                 <Alignment ss:Horizontal='Right' ss:Vertical='Bottom'/>
                 <NumberFormat ss:Format='#,##0.00_ ;[Red]\-#,##0.00\ '/>
                <Borders>
                     <Border ss:Position='Left' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Top' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Right' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Bottom' ss:LineStyle='Continuous' ss:Weight='1'/>
                    </Borders>
             </Style>
             <Style ss:ID='s27'>
                   <Borders>
                     <Border ss:Position='Left' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Top' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Right' ss:LineStyle='Continuous' ss:Weight='1'/>
                     <Border ss:Position='Bottom' ss:LineStyle='Continuous' ss:Weight='1'/>
                    </Borders>
             </Style>
             </Styles>
    
             <Worksheet ss:Name='".$title."'>
  
             <Table>
             <Column ss:Index='1' ss:AutoFitWidth=\"1\" ss:Width='25.00'/>
             <Column ss:Index='2' ss:AutoFitWidth=\"1\" ss:Width='80.00'/>
             <Column ss:Index='3' ss:AutoFitWidth=\"1\" ss:Width='80.00'/>
             <Column ss:Index='4' ss:AutoFitWidth=\"1\" ss:Width='100.00'/>
             <Column ss:Index='5' ss:AutoFitWidth=\"1\" ss:Width='150.00'/>
             <Column ss:Index='6' ss:AutoFitWidth=\"1\" ss:Width='150.00'/>
             <Column ss:Index='7' ss:AutoFitWidth=\"1\" ss:Width='80.00'/>
                 ";
    
         // header
         $data .= "<Row ss:StyleID='s24'>";
         $data .= "<Cell ss:MergeAcross='7'><Data ss:Type='String'></Data></Cell>";
         $data .= "</Row>";
    
         $data .= "<Row ss:StyleID='s20'>";
         $data .= "<Cell ss:MergeAcross='7'><Data ss:Type='String'>".$companyName."</Data></Cell>";
         $data .= "</Row>";
         $data .= "<Row ss:StyleID='s24A'>";
         $data .= "<Cell ss:MergeAcross='7'><Data ss:Type='String'>".$address."</Data></Cell>";
         $data .= "</Row>";
    
         $data .= "<Row ss:StyleID='s24'>";
         $data .= "<Cell ss:MergeAcross='7'><Data ss:Type='String'></Data></Cell>";
         $data .= "</Row>";
       
         $data .= "<Row ss:StyleID='s24'>";
         $data .= "<Cell ss:MergeAcross='7'><Data ss:Type='String'>".strtoupper($title)."</Data></Cell>";
         $data .= "</Row>";
       
         $data .= "<Row ss:StyleID='s24'>";
         $data .= "<Cell ss:MergeAcross='7'><Data ss:Type='String'></Data></Cell>";
         $data .= "</Row>";
    
         $fields[]="  ";
         $fields[]="DATE";            
         $fields[]="PARTICULARS";            
         $fields[]="BEGINNING BALANCE";            
         $fields[]="DEBIT";            
         $fields[]="CREDIT";            
         $fields[]="END BALANCE";
         $fields[]="REFERENCE NO";
    

         $data .= "<Row ss:StyleID='s24'>";
         //Field Name Data
         foreach ($fields as $fld) {
             $data .= "<Cell ss:StyleID='s23'><Data ss:Type='String'>$fld</Data></Cell>";
         }
         $data .= "</Row>";
    
         if (count($record)) {
             $ctr = 1;
             foreach ($record as $row) {
                 $data .= "<Row>";
                 $data .= "<Cell ss:StyleID='s27'><Data ss:Type='String'>".$ctr.".</Data></Cell>";
                 $data .= "<Cell ss:StyleID='s27'><Data ss:Type='String'>".$row->date."</Data></Cell>";
                 $data .= "<Cell ss:StyleID='s27'><Data ss:Type='String'>".$row->brand.' '.$row->item.' '.$row->description.' '.$row->umsr.')'."</Data></Cell>";
                 $data .= "<Cell ss:StyleID='s27'><Data ss:Type='String'>".$row->begBal."</Data></Cell>";
                 $data .= "<Cell ss:StyleID='s27'><Data ss:Type='String'>".$row->debit."</Data></Cell>";
                 $data .= "<Cell ss:StyleID='s27'><Data ss:Type='String'>".$row->credit."</Data></Cell>";                
                 $data .= "<Cell ss:StyleID='s27'><Data ss:Type='String'>".$row->endBal."</Data></Cell>";                
                 $data .= "<Cell ss:StyleID='s27'><Data ss:Type='String'>".$row->refNo."</Data></Cell>";                
                 $data .= "</Row>";    
                 $ctr++;
             }
         }
         $data .= "</Table></Worksheet>";
         $data .= "</Workbook>";
           
         //Final XML Blurb
         $filename = "Stockcard";
    
         header("Content-type: application/octet-stream");
         header("Content-Disposition: attachment; filename=$filename.xls;");
         header("Content-Type: application/ms-excel");
         header("Pragma: no-cache");
         header("Expires: 0");
       
         echo $data;

    }

    public function getFilterStockCard()
    {
        $itemID = trim($this->input->post('itemID'));
        $branchID = trim($this->input->post('branchID'));
        $from_date = trim($this->input->post('date_from'));
        $date_to = trim($this->input->post('date_to'));

        $response = [
            'data' => $this->getStockCard($itemID, $branchID, $from_date, $date_to),
        ];

        echo json_encode($response);
    }

    public function getStockCard($itemID, $branchID, $from_date, $date_to)
    {
        $this->db->select($this->table.'.*');
        $this->db->select('items.*');
        $this->db->where('DATE('.$this->table.'.date) >= ', $from_date);
        $this->db->where('DATE('.$this->table.'.date) <= ', $date_to);
        $this->db->where('branchID', $branchID);
        $this->db->where($this->table.'.itemID', $itemID);
        $this->db->from($this->table);
        $this->db->join('items', $this->table.'.itemID=items.itemID','left');
        $results = $this->db->get()->result();

        $data = [];
        foreach($results as $result) {
            $data[] = [
                'date' => $result->date,
                'begBal' => $result->begBal,
                'debit' => $result->debit,
                'credit' => $result->credit,
                'endBal' => $result->endBal,
                'particular' => $result->brand .' '.$result->item .' '. $result->decription,
                'refNo' => $result->refNo
            ];
        }

        return $data;
    }



}
?>